#!/bin/python3
import fileinput
from json import dumps
import re
import sys
from urllib.parse import urlparse

"""
Papertrail Format is:

- papertrail log id (ignored)
- received at (ignored)
- generated at
- source id (ignored)
- source name, like the name of the heroku app
- source ip (ignored)
- facility (ignored)
- severity (should be Info for router messages)
- program (should be heroku/router)
- message (the rest of this is the message from the Heroku Router with self-explanatory fields)
"""

log_format = re.compile(r'[0-9]+\t[^\t]+\t(?P<date>[0-9-]+) (?P<time>[0-9:]+)\t[0-9]+\t(?P<app_name>[^\t]+)\t[^\t]+\t[^\t]+\tInfo\theroku\/router\tat=info method=(?P<method>(GET|OPTIONS|POST|PUT|DELETE|PATCH|HEAD)) path="(?P<path>[^"]+)" host=(?P<host>[^\s]+) request_id=(?P<request_id>[0-9a-z-]+) fwd="(?P<client_ip>[^"]+)" dyno=(?P<server>[^\s]+) connect=(?P<connect_time>[0-9]+)ms service=(?P<service_time>[0-9]+)ms status=(?P<http_status>[0-9]+) bytes=(?P<response_size_bytes>[0-9]+) protocol=(?P<protocol>[^\s]+)')


def parse_line(line):
    match = re.fullmatch(log_format, line)

    if match is None:
        # output lines that fail to parse to stderr
        print(line, file=sys.stderr)
        return None

    parsed_path = urlparse(match.group('path'))

    return {
        'date_time': match.group('date') + 'T' + match.group('time'),
        'app_name': match.group('app_name'),
        'client_ip': match.group('client_ip'),
        'host': match.group('host'),
        'http_status': int(match.group('http_status')),
        'method': match.group('method'),
        'path': parsed_path.path,
        'query': parsed_path.query,
        'protocol': match.group('protocol'),
        'request_id': match.group('request_id'),
        'response_size_bytes': int(match.group('response_size_bytes')),
        'server': match.group('server'),
        'time_connect_ms': int(match.group('connect_time')),
        'time_service_ms': int(match.group('service_time')),
    }


if __name__ == '__main__':
    for line in fileinput.input():
        parsed_line = parse_line(line.strip())
        if parse_line is not None:
            print(dumps(parsed_line, separators=(',', ':')))
